<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>ISET Sfax Chatbot Admin</title>
    <link rel="icon" type="image/x-icon" href="/static/favicon.ico">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;400;500;600;700&family=Noto+Sans+Arabic:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <style>
  :root {
  /* Color palette - Premium blue theme */
  --primary: #0056b3;
  --primary-dark: #003087;
  --primary-light: #3b82f6;
  --secondary: #f59e0b;
  --secondary-dark: #d97706;
  --secondary-light: #fcd34d;
  --accent: #f8fafc;
  --text-dark: #0f172a;
  --text-muted: #64748b;
  --text-light: #ffffff;
  --background-light: #f9fafb;
  --background-dark: #111827;
  --border-light: #e5e7eb;
  --border-dark: #374151;

  /* Status colors */
  --success: #10b981;
  --success-light: #ecfdf5;
  --success-dark: #065f46;
  --info: #0ea5e9;
  --info-light: #e0f2fe;
  --info-dark: #075985;
  --warning: #f59e0b;
  --warning-light: #fef3c7;
  --warning-dark: #b45309;
  --danger: #ef4444;
  --danger-light: #fee2e2;
  --danger-dark: #b91c1c;

  /* Spacing and dimensions */
  --spacing-1: 4px;
  --spacing-2: 8px;
  --spacing-3: 12px;
  --spacing-4: 16px;
  --spacing-5: 20px;
  --spacing-6: 24px;
  --spacing-8: 32px;
  --spacing-10: 40px;
  --spacing-12: 48px;
  --spacing-16: 64px;

  /* Border radius */
  --border-radius-sm: 6px;
  --border-radius: 8px;
  --border-radius-lg: 12px;
  --border-radius-xl: 16px;
  --border-radius-full: 9999px;

  /* Shadows */
  --shadow-xs: 0 1px 2px 0 rgba(0, 0, 0, 0.05);
  --shadow-sm: 0 2px 4px 0 rgba(0, 0, 0, 0.08);
  --shadow: 0 4px 8px -2px rgba(0, 0, 0, 0.1);
  --shadow-md: 0 8px 16px -4px rgba(0, 0, 0, 0.12);
  --shadow-lg: 0 12px 24px -6px rgba(0, 0, 0, 0.15);
  --shadow-xl: 0 20px 40px -12px rgba(0, 0, 0, 0.2);

  /* Typography */
  --font-primary: 'Poppins', 'Noto Sans Arabic', sans-serif;
  --font-size-xs: 0.75rem;
  --font-size-sm: 0.875rem;
  --font-size-base: 1rem;
  --font-size-lg: 1.125rem;
  --font-size-xl: 1.25rem;
  --font-size-2xl: 1.5rem;
  --font-size-3xl: 1.875rem;
  --font-size-4xl: 2.25rem;

  /* Transitions */
  --transition-fast: all 0.15s ease;
  --transition: all 0.25s ease;
  --transition-slow: all 0.4s ease;

  /* Layout */
  --header-height: 72px;
  --container-max-width: 1320px;
}

/* Dark mode variables */
.dark {
  --primary: #3b82f6;
  --primary-dark: #0056b3;
  --primary-light: #60a5fa;
  --secondary: #fcd34d;
  --secondary-dark: #f59e0b;
  --secondary-light: #fde68a;
  --accent: #1f2937;
  --text-dark: #e2e8f0;
  --text-muted: #94a3b8;
  --text-light: #f9fafb;
  --background-light: #0f172a;
  --background-dark: #f3f4f6;
  --border-light: #374151;
  --border-dark: #4b5563;
}

/* Base styles */
* {
  box-sizing: border-box;
  margin: 0;
  padding: 0;
  font-family: var(--font-primary);
}

html {
  scroll-behavior: smooth;
  font-size: 16px;
}

body {
  background: linear-gradient(145deg, var(--background-light) 0%, #e5e7eb 100%);
  color: var(--text-dark);
  line-height: 1.7;
  transition: background-color var(--transition), color var(--transition);
  min-height: 100vh;
  display: flex;
  flex-direction: column;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

body.fade {
  opacity: 0.8;
  transition: opacity var(--transition);
}

.dark body {
  background: linear-gradient(145deg, var(--background-light) 0%, #1e2937 100%);
}

/* RTL Support */
body[lang="ar"] {
  direction: rtl;
  text-align: right;
  font-family: 'Noto Sans Arabic', 'Poppins', sans-serif;
}

body[lang="ar"] .admin-controls,
body[lang="ar"] .action-buttons,
body[lang="ar"] .form-actions,
body[lang="ar"] .dashboard-tabs,
body[lang="ar"] .language-switcher,
body[lang="ar"] .analytics-tabs,
body[lang="ar"] .modal-actions {
  flex-direction: row-reverse;
}

body[lang="ar"] .checkbox-group,
body[lang="ar"] .range-labels {
  flex-direction: row-reverse;
}

body[lang="ar"] th,
body[lang="ar"] td {
  text-align: right;
}

/* Typography */
h1, h2, h3, h4, h5, h6 {
  font-weight: 600;
  line-height: 1.3;
  color: var(--text-dark);
}

h1 { font-size: var(--font-size-3xl); }
h2 { font-size: var(--font-size-2xl); }
h3 { font-size: var(--font-size-xl); }

/* Admin Header */
.admin-header {
  background: linear-gradient(90deg, var(--primary-dark), var(--primary));
  color: var(--text-light);
  position: sticky;
  top: 0;
  z-index: 1000;
  box-shadow: var(--shadow-md);
  height: var(--header-height);
  overflow: hidden;
}

.admin-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at top right, rgba(255, 255, 255, 0.15), transparent 70%);
  pointer-events: none;
}

.admin-header-content {
  max-width: var(--container-max-width);
  margin: 0 auto;
  padding: 0 var(--spacing-4);
  display: flex;
  justify-content: space-between;
  align-items: center;
  height: var(--header-height);
}

.admin-header h1 {
  font-size: var(--font-size-2xl);
  font-weight: 700;
  letter-spacing: 0.02em;
  background: linear-gradient(90deg, #ffffff, #e6e9ed);
  -webkit-background-clip: text;
  background-clip: text;
  -webkit-text-fill-color: transparent;
}

.admin-header p {
  font-size: var(--font-size-sm);
  opacity: 0.85;
  max-width: 600px;
}

/* Admin Controls */
.admin-controls {
  display: flex;
  gap: var(--spacing-3);
  align-items: center;
}

/* Language Switcher */
.language-switcher {
  display: flex;
  gap: var(--spacing-1);
  background: rgba(0, 0, 0, 0.15);
  padding: var(--spacing-1);
  border-radius: var(--border-radius-full);
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
}

.language-btn {
  background: transparent;
  color: var(--text-light);
  padding: var(--spacing-2) var(--spacing-3);
  border-radius: var(--border-radius-full);
  border: none;
  font-size: var(--font-size-sm);
  font-weight: 500;
  cursor: pointer;
  transition: var(--transition-fast);
  opacity: 0.8;
}

.language-btn.active,
.language-btn:hover {
  background: var(--primary-light);
  color: var(--text-light);
  opacity: 1;
  box-shadow: var(--shadow-sm);
}

/* Buttons */
.btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  gap: var(--spacing-2);
  padding: var(--spacing-3) var(--spacing-5);
  border-radius: var(--border-radius-full);
  font-weight: 600;
  font-size: var(--font-size-sm);
  transition: var(--transition-fast);
  border: none;
  cursor: pointer;
  box-shadow: var(--shadow-sm);
  position: relative;
  overflow: hidden;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.btn::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(to bottom, rgba(255, 255, 255, 0.15), transparent);
  pointer-events: none;
}

.btn:hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-md);
}

.btn:active {
  transform: translateY(0);
  box-shadow: var(--shadow-xs);
}

.btn-primary {
  background: linear-gradient(135deg, var(--primary), var(--primary-light));
  color: var(--text-light);
}

.btn-primary:hover {
  background: linear-gradient(135deg, var(--primary-light), var(--primary));
}

.btn-icon {
  padding: var(--spacing-3);
  border-radius: var(--border-radius-full);
  width: 40px;
  height: 40px;
}

.btn-sm {
  padding: var(--spacing-2) var(--spacing-4);
  font-size: var(--font-size-xs);
}

.btn-edit {
  background: linear-gradient(135deg, var(--info), var(--info-light));
  color: var(--text-dark);
}

.btn-edit:hover {
  background: linear-gradient(135deg, var(--info-light), var(--info));
}

.btn-delete {
  background: linear-gradient(135deg, var(--danger), var(--danger-light));
  color: var(--text-dark);
}

.btn-delete:hover {
  background: linear-gradient(135deg, var(--danger-light), var(--danger));
}

/* Admin Container */
.admin-container {
  max-width: var(--container-max-width);
  margin: var(--spacing-12) auto;
  padding: 0 var(--spacing-4);
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  gap: var(--spacing-10);
}

/* Dashboard Cards */
.dashboard-cards {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: var(--spacing-8);
}

.dashboard-card {
  background: var(--accent);
  border-radius: var(--border-radius-lg);
  box-shadow: var(--shadow-lg);
  overflow: hidden;
  transition: var(--transition);
  display: flex;
  flex-direction: column;
  border: 1px solid var(--border-light);
  animation: fadeInUp 0.6s ease-out forwards;
  opacity: 0;
}

@keyframes fadeInUp {
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.dashboard-card:hover {
  transform: translateY(-6px);
  box-shadow: var(--shadow-xl);
}

.card-header {
  background: linear-gradient(135deg, var(--primary-dark), var(--primary));
  color: var(--text-light);
  padding: var(--spacing-6);
  text-align: center;
  position: relative;
}

.card-header::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at top right, rgba(255, 255, 255, 0.2), transparent 70%);
  pointer-events: none;
}

.card-header h2 {
  font-size: var(--font-size-xl);
  font-weight: 600;
  margin-bottom: var(--spacing-2);
  letter-spacing: 0.02em;
}

.card-header p {
  font-size: var(--font-size-sm);
  opacity: 0.9;
  line-height: 1.5;
}

.card-body {
  padding: var(--spacing-6);
  flex-grow: 1;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  background: var(--accent);
}

.card-body p {
  margin-bottom: var(--spacing-5);
  line-height: 1.8;
  color: var(--text-muted);
}

/* Dashboard Content */
.dashboard-content {
  display: none;
  flex-direction: column;
  gap: var(--spacing-8);
}

.dashboard-content.active {
  display: flex;
}

/* Dashboard Tabs */
.dashboard-tabs {
  display: flex;
  background: var(--accent);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-sm);
  overflow: hidden;
  border: 1px solid var(--border-light);
}

.dashboard-tab {
  padding: var(--spacing-4);
  background: transparent;
  border: none;
  cursor: pointer;
  font-size: var(--font-size-base);
  font-weight: 500;
  transition: var(--transition-fast);
  flex: 1;
  text-align: center;
  position: relative;
  color: var(--text-dark);
}

.dashboard-tab::after {
  content: '';
  position: absolute;
  bottom: 0;
  left: 0;
  width: 0;
  height: 3px;
  background: var(--secondary);
  transition: width var(--transition-fast);
}

.dashboard-tab.active {
  background: var(--primary);
  color: var(--text-light);
}

.dashboard-tab.active::after {
  width: 100%;
}

.dashboard-tab:hover:not(.active) {
  background: var(--border-light);
  color: var(--primary);
}

/* Tab Content */
.tab-content {
  display: none;
  background: var(--accent);
  border-radius: var(--border-radius);
  padding: var(--spacing-8);
  box-shadow: var(--shadow);
  border: 1px solid var(--border-light);
}

.tab-content.active {
  display: block;
}

/* Analytics Tabs */
.analytics-tabs {
  display: flex;
  background: var(--accent);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-sm);
  overflow: hidden;
  margin-bottom: var(--spacing-6);
  border: 1px solid var(--border-light);
}

.analytics-tab {
  padding: var(--spacing-3) var(--spacing-4);
  background: transparent;
  border: none;
  cursor: pointer;
  font-size: var(--font-size-base);
  font-weight: 500;
  transition: var(--transition-fast);
  flex: 1;
  text-align: center;
  color: var(--text-dark);
}

.analytics-tab.active {
  background: var(--primary);
  color: var(--text-light);
}

.analytics-tab:hover:not(.active) {
  background: var(--border-light);
  color: var(--primary);
}

.analytics-tab-content {
  display: none;
}

.analytics-tab-content.active {
  display: block;
}

/* Tables */
.table-container {
  overflow-x: auto;
  position: relative;
  margin-bottom: var(--spacing-6);
}

table {
  width: 100%;
  border-collapse: separate;
  border-spacing: 0;
  background: var(--accent);
  border-radius: var(--border-radius);
  overflow: hidden;
  box-shadow: var(--shadow);
}

th, td {
  padding: var(--spacing-4);
  text-align: left;
  border-bottom: 1px solid var(--border-light);
}

th {
  background: var(--primary-dark);
  color: var(--text-light);
  font-weight: 600;
  text-transform: uppercase;
  font-size: var(--font-size-sm);
  letter-spacing: 0.05em;
}

td {
  color: var(--text-dark);
}

tr:last-child td {
  border-bottom: none;
}

tr:hover {
  background: var(--border-light);
}

/* Action Buttons */
.action-buttons {
  display: flex;
  gap: var(--spacing-2);
}

/* Forms */
.form-group {
  margin-bottom: var(--spacing-5);
}

label {
  display: block;
  margin-bottom: var(--spacing-2);
  font-weight: 500;
  color: var(--text-dark);
  font-size: var(--font-size-sm);
}

input[type="text"],
input[type="email"],
input[type="password"],
textarea,
select {
  width: 100%;
  padding: var(--spacing-3);
  border: 1px solid var(--border-light);
  border-radius: var(--border-radius);
  font-size: var(--font-size-base);
  background: var(--background-light);
  transition: var(--transition);
  box-shadow: var(--shadow-xs);
}

input[type="text"]:focus,
input[type="email"]:focus,
input[type="password"]:focus,
textarea:focus,
select:focus {
  outline: none;
  border-color: var(--primary-light);
  box-shadow: 0 0 0 4px rgba(59, 130, 246, 0.15);
  background: var(--accent);
}

textarea {
  min-height: 160px;
  resize: vertical;
}

.form-actions {
  display: flex;
  gap: var(--spacing-3);
  margin-top: var(--spacing-6);
}

/* Analytics Grid */
.analytics-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
  gap: var(--spacing-6);
  margin-bottom: var(--spacing-8);
}

.analytics-card {
  background: var(--accent);
  border-radius: var(--border-radius);
  padding: var(--spacing-5);
  box-shadow: var(--shadow);
  text-align: center;
  transition: var(--transition);
  border: 1px solid var(--border-light);
}

.analytics-card:hover {
  transform: translateY(-4px);
  box-shadow: var(--shadow-lg);
}

.analytics-card h3 {
  font-size: var(--font-size-lg);
  color: var(--primary);
  margin-bottom: var(--spacing-4);
  font-weight: 600;
}

.analytics-card .stat {
  font-size: var(--font-size-3xl);
  font-weight: 700;
  color: var(--secondary-dark);
  margin-bottom: var(--spacing-3);
}

.analytics-card p {
  font-size: var(--font-size-sm);
  color: var(--text-muted);
}

/* Charts */
.chart-container {
  background: var(--accent);
  border-radius: var(--border-radius);
  padding: var(--spacing-6);
  box-shadow: var(--shadow);
  margin-bottom: var(--spacing-8);
  border: 1px solid var(--border-light);
}

.chart-container h3 {
  font-size: var(--font-size-lg);
  color: var(--primary);
  margin-bottom: var(--spacing-5);
  font-weight: 600;
}

.chart {
  width: 100%;
  height: 320px;
}

/* Settings Form */
.settings-form .form-group {
  margin-bottom: var(--spacing-6);
}

input[type="range"] {
  width: 100%;
  margin-bottom: var(--spacing-3);
  accent-color: var(--primary);
}

.range-labels {
  display: flex;
  justify-content: space-between;
  font-size: var(--font-size-xs);
  color: var(--text-muted);
  font-weight: 500;
}

.range-value {
  text-align: center;
  font-weight: 600;
  margin-bottom: var(--spacing-3);
  color: var(--text-dark);
  font-size: var(--font-size-sm);
}

.checkbox-group {
  display: flex;
  align-items: center;
  gap: var(--spacing-3);
}

.checkbox-group input {
  width: auto;
  accent-color: var(--primary);
}

.checkbox-group label {
  margin-bottom: 0;
  font-size: var(--font-size-base);
}

/* Toast */
.toast {
  position: fixed;
  bottom: 24px;
  right: 24px;
  background: var(--success);
  color: var(--text-light);
  padding: var(--spacing-3) var(--spacing-5);
  border-radius: var(--border-radius);
  box-shadow: var(--shadow-lg);
  opacity: 0;
  transform: translateY(30px);
  transition: opacity var(--transition), transform var(--transition);
  z-index: 1000;
  display: flex;
  align-items: center;
  gap: var(--spacing-2);
  font-size: var(--font-size-sm);
  font-weight: 500;
}

.toast::before {
  content: '\f058';
  font-family: 'Font Awesome 5 Free';
  font-weight: 900;
  font-size: var(--font-size-base);
}

.toast.show {
  opacity: 1;
  transform: translateY(0);
}

.toast.error {
  background: var(--danger);
}

.toast.error::before {
  content: '\f057';
}

/* Loader */
.loader {
  display: none;
  border: 5px solid var(--border-light);
  border-top: 5px solid var(--primary);
  border-radius: 50%;
  width: 36px;
  height: 36px;
  animation: spin 0.8s linear infinite;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

.loading .loader {
  display: block;
}

@keyframes spin {
  0% { transform: translate(-50%, -50%) rotate(0deg); }
  100% { transform: translate(-50%, -50%) rotate(360deg); }
}

/* Modal */
.modal {
  display: none;
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: rgba(0, 0, 0, 0.6);
  z-index: 1000;
  align-items: center;
  justify-content: center;
  backdrop-filter: blur(4px);
}

.modal.active {
  display: flex;
}

.modal-content {
  background: var(--accent);
  border-radius: var(--border-radius-lg);
  padding: var(--spacing-8);
  max-width: 520px;
  width: 90%;
  box-shadow: var(--shadow-xl);
  position: relative;
  animation: modalFadeIn 0.3s ease-out;
}

@keyframes modalFadeIn {
  from { opacity: 0; transform: scale(0.95); }
  to { opacity: 1; transform: scale(1); }
}

.modal-content h2 {
  font-size: var(--font-size-xl);
  margin-bottom: var(--spacing-5);
  color: var(--primary);
  font-weight: 600;
}

.modal-close {
  position: absolute;
  top: var(--spacing-4);
  right: var(--spacing-4);
  background: none;
  border: none;
  font-size: var(--font-size-lg);
  cursor: pointer;
  color: var(--text-muted);
  transition: var(--transition-fast);
}

.modal-close:hover {
  color: var(--primary);
  transform: rotate(90deg);
}

.modal-actions {
  display: flex;
  gap: var(--spacing-3);
  justify-content: flex-end;
  margin-top: var(--spacing-6);
}

.modal-confirm-text {
  margin-bottom: var(--spacing-5);
  line-height: 1.8;
  color: var(--text-muted);
}

/* Footer */
.admin-footer {
  background: linear-gradient(90deg, var(--primary-dark), var(--primary));
  color: var(--text-light);
  padding: var(--spacing-8) 0;
  margin-top: auto;
  text-align: center;
  box-shadow: 0 -8px 30px rgba(0, 0, 0, 0.2);
  position: relative;
}

.admin-footer::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  height: 4px;
  background: linear-gradient(to right, var(--primary), var(--secondary), var(--primary));
}

.admin-footer p {
  font-size: var(--font-size-sm);
  opacity: 0.9;
  letter-spacing: 0.03em;
}

/* Dark Mode Adjustments */
.dark .dashboard-card,
.dark .tab-content,
.dark .analytics-card,
.dark .chart-container,
.dark .modal-content,
.dark table {
  background: var(--accent);
  border-color: var(--border-dark);
}

.dark th {
  background: var(--primary-dark);
}

.dark input[type="text"],
.dark input[type="email"],
.dark input[type="password"],
.dark textarea,
.dark select {
  background: var(--background-dark);
  border-color: var(--border-dark);
}

/* Responsive Styles */
@media (max-width: 1024px) {
  .admin-container {
    margin: var(--spacing-8) auto;
  }

  .dashboard-cards {
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  }
}

@media (max-width: 768px) {
  .admin-header-content {
    flex-direction: column;
    gap: var(--spacing-4);
    padding: var(--spacing-3) var(--spacing-4);
    height: auto;
  }

  .admin-controls {
    flex-wrap: wrap;
    justify-content: center;
  }

  .dashboard-tabs,
  .analytics-tabs {
    flex-direction: column;
  }

  .dashboard-tab,
  .analytics-tab {
    padding: var(--spacing-3);
    font-size: var(--font-size-sm);
  }

  .analytics-grid {
    grid-template-columns: 1fr;
  }

  .toast {
    right: 16px;
    left: 16px;
    bottom: 16px;
  }
}

@media (max-width: 576px) {
  .admin-header h1 {
    font-size: var(--font-size-xl);
  }

  .card-body {
    padding: var(--spacing-4);
  }

  .action-buttons,
  .form-actions {
    flex-direction: column;
    gap: var(--spacing-2);
  }

  .language-switcher {
    flex-wrap: wrap;
    justify-content: center;
    gap: var(--spacing-2);
  }

  .language-btn {
    flex: 1;
    min-width: 48px;
    text-align: center;
  }

  .modal-content {
    padding: var(--spacing-6);
  }
}

/* Accessibility */
:focus-visible {
  outline: 3px solid var(--primary-light);
  outline-offset: 2px;
  border-radius: var(--border-radius-sm);
}

.btn:focus-visible,
.language-btn:focus-visible,
.dashboard-tab:focus-visible,
.analytics-tab:focus-visible,
.modal-close:focus-visible {
  outline: 3px solid var(--secondary);
  outline-offset: 2px;
}

/* Animations */
@keyframes pulse {
  0% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0.5); }
  70% { box-shadow: 0 0 0 12px rgba(59, 130, 246, 0); }
  100% { box-shadow: 0 0 0 0 rgba(59, 130, 246, 0); }
}

.pulse {
  animation: pulse 2s infinite;
}
    </style>
</head>
<body aria-live="polite">
    <header class="admin-header">
        <div class="admin-header-content">
            <div>
                <h1 data-i18n="header.title">ISET Sfax Chatbot Admin</h1>
                <p data-i18n="header.subtitle">Manage the chatbot knowledge base and view analytics</p>
            </div>
            <div class="admin-controls">
                <div class="language-switcher" role="navigation" aria-label="Language selection">
                    <button class="language-btn" data-lang="en" aria-label="Switch to English" role="button">EN</button>
                    <button class="language-btn" data-lang="fr" aria-label="Switch to French" role="button">FR</button>
                    <button class="language-btn" data-lang="ar" aria-label="Switch to Arabic" role="button">AR</button>
                </div>
                <button class="btn btn-icon" id="theme-toggle" aria-label="Toggle theme">
                    <i class="fas fa-moon" id="theme-icon"></i>
                </button>
                <a href="{{ url_for('main.index_interface') }}" class="btn btn-primary" id="close-dashboard">
                    <span data-i18n="header.back">Back to Chat</span>
                </a>
                <a href="{{ url_for('main.logout') }}" class="btn btn-primary">
                    <i class="fas fa-sign-out-alt"></i> <span data-i18n="header.logout">Logout</span>
                </a>
            </div>
        </div>
    </header>

    <main class="admin-container" id="main-content">
        <section class="dashboard-cards">
            <article class="dashboard-card">
                <div class="card-header">
                    <h2 data-i18n="card.analytics.title">Conversation Analytics</h2>
                    <p data-i18n="card.analytics.subtitle">View insights from chatbot interactions</p>
                </div>
                <div class="card-body">
                    <p data-i18n="card.analytics.description">Analyze user sentiment and feedback to improve the chatbot's performance.</p>
                    <button id="open-analytics" class="btn btn-primary" data-i18n="card.analytics.button">View Analytics</button>
                </div>
            </article>
            <article class="dashboard-card">
                <div class="card-header">
                    <h2 data-i18n="card.settings.title">System Settings</h2>
                    <p data-i18n="card.settings.subtitle">Configure chatbot behavior and appearance</p>
                </div>
                <div class="card-body">
                    <p data-i18n="card.settings.description">Adjust confidence thresholds, default language, and other settings that control how the chatbot interacts with users.</p>
                    <button id="open-settings" class="btn btn-primary" data-i18n="card.settings.button">Configure Settings</button>
                </div>
            </article>
        </section>

        <section id="dashboard-content" class="dashboard-content">
            <div class="dashboard-tabs">
                <button class="dashboard-tab" data-tab="analytics" data-i18n="tab.analytics">Analytics</button>
                <button class="dashboard-tab" data-tab="settings" data-i18n="tab.settings">Settings</button>
            </div>

            <div id="analytics-tab" class="tab-content">
                <h2 data-i18n="analytics.title">Chatbot Analytics</h2>
                <div class="analytics-tabs">
                    <button class="analytics-tab active" data-tab="stats" data-i18n="analytics.stats.title">Statistics</button>
                    <button class="analytics-tab" data-tab="feedback" data-i18n="analytics.feedbackList.title">User Feedback</button>
                    <button class="analytics-tab" data-tab="users" data-i18n="analytics.usersList.title">Users</button>
                    <button class="analytics-tab" data-tab="messages" data-i18n="analytics.messagesList.title">Contact Messages</button>
                </div>
                <div class="analytics-tab-content active" id="stats-tab">
                    <div class="analytics-grid">
                        <div class="analytics-card">
                            <h3 data-i18n="analytics.totalConversations.title">Total Conversations</h3>
                            <div class="stat" id="total-conversations">0</div>
                            <p data-i18n="analytics.totalConversations.description">Number of chat sessions initiated</p>
                        </div>
                        <div class="analytics-card">
                            <h3 data-i18n="analytics.totalMessages.title">Total Messages</h3>
                            <div class="stat" id="total-messages">0</div>
                            <p data-i18n="analytics.totalMessages.description">Total messages exchanged</p>
                        </div>
                        <div class="analytics-card">
                            <h3 data-i18n="analytics.positiveFeedback.title">Positive Feedback</h3>
                            <div class="stat" id="positive-feedback">0%</div>
                            <p data-i18n="analytics.positiveFeedback.description">Percentage of positive responses</p>
                        </div>
                        <div class="analytics-card">
                            <h3 data-i18n="analytics.totalFeedback.title">Total Feedback</h3>
                            <div class="stat" id="total-feedback">0</div>
                            <p data-i18n="analytics.totalFeedback.description">Total feedback submissions</p>
                        </div>
                    </div>
                    <div class="chart-container">
                        <h3 data-i18n="analytics.userTrend.title">User Trend</h3>
                        <canvas id="user-trend-chart" class="chart"></canvas>
                    </div>
                    <div class="chart-container">
                        <h3 data-i18n="analytics.feedbackAnalysis.title">Feedback Analysis</h3>
                        <canvas id="feedback-chart" class="chart"></canvas>
                    </div>
                </div>
                <div class="analytics-tab-content" id="feedback-tab">
                    <div class="table-container">
                        <table id="feedback-table">
                            <thead>
                                <tr>
                                    <th data-i18n="analytics.feedbackList.responseId">Response ID</th>
                                    <th data-i18n="analytics.feedbackList.rating">Rating</th>
                                </tr>
                            </thead>
                            <tbody id="feedback-table-body"></tbody>
                        </table>
                        <div class="loader"></div>
                    </div>
                </div>
                <div class="analytics-tab-content" id="users-tab">
                    <div class="table-container">
                        <button class="btn btn-primary btn-sm" id="add-user-btn" data-i18n="users.add" style="margin-bottom: var(--spacing-2);"></button>
                        <table id="users-table">
                            <thead>
                                <tr>
                                    <th data-i18n="analytics.usersList.id">ID</th>
                                    <th data-i18n="analytics.usersList.username">Username</th>
                                    <th data-i18n="analytics.usersList.role">Role</th>
                                    <th data-i18n="users.actions">Actions</th>
                                </tr>
                            </thead>
                            <tbody id="users-table-body"></tbody>
                        </table>
                        <div class="loader"></div>
                    </div>
                </div>
                <div class="analytics-tab-content" id="messages-tab">
                    <div class="table-container">
                        <table id="messages-table">
                            <thead>
                                <tr>
                                    <th data-i18n="analytics.messagesList.id">ID</th>
                                    <th data-i18n="analytics.messagesList.name">Name</th>
                                    <th data-i18n="analytics.messagesList.email">Email</th>
                                    <th data-i18n="analytics.messagesList.subject">Subject</th>
                                    <th data-i18n="analytics.messagesList.message">Message</th>
                                    <th data-i18n="analytics.messagesList.submittedAt">Submitted At</th>
                                    <th data-i18n="analytics.messagesList.username">Username</th>
                                </tr>
                            </thead>
                            <tbody id="messages-table-body"></tbody>
                        </table>
                        <div class="loader"></div>
                    </div>
                </div>
            </div>

            <div id="settings-tab" class="tab-content">
                <h2 data-i18n="settings.title">Chatbot Settings</h2>
                <form id="settings-form" class="settings-form">
                    <div class="form-group">
                        <label for="confidence-threshold" data-i18n="settings.confidenceThreshold.label">Confidence Threshold:</label>
                        <div class="range-value" id="confidence-value">50%</div>
                        <input type="range" id="confidence-threshold" name="confidenceThreshold" min="0" max="100" value="50">
                        <div class="range-labels">
                            <span>0%</span>
                            <span>100%</span>
                        </div>
                        <p data-i18n="settings.confidenceThreshold.description">Minimum confidence level required for the chatbot to provide an answer</p>
                    </div>
                    <div class="form-group">
                        <label for="default-language" data-i18n="settings.language.label">Default Language:</label>
                        <select id="default-language" name="defaultLanguage">
                            <option value="en" data-i18n="settings.language.english">English</option>
                            <option value="fr" data-i18n="settings.language.french">French</option>
                            <option value="ar" data-i18n="settings.language.arabic">Arabic</option>
                        </select>
                    </div>
                    <div class="form-group checkbox-group">
                        <input type="checkbox" id="show-ml-insights" name="showMLInsights">
                        <label for="show-ml-insights" data-i18n="settings.mlInsights">Show ML Insights in Chat Interface</label>
                    </div>
                    <div class="form-group checkbox-group">
                        <input type="checkbox" id="enable-voice" name="enableVoice">
                        <label for="enable-voice" data-i18n="settings.voiceInput">Enable Voice Input</label>
                    </div>
                    <div class="form-group checkbox-group">
                        <input type="checkbox" id="enable-feedback" name="enableFeedback">
                        <label for="enable-feedback" data-i18n="settings.userFeedback">Enable User Feedback</label>
                    </div>
                    <div class="form-actions">
                        <button type="submit" class="btn btn-primary" data-i18n="settings.save">Save Settings</button>
                    </div>
                </form>
            </div>

            <div id="add-user-modal" class="modal">
                <div class="modal-content">
                    <button class="modal-close" aria-label="Close modal">×</button>
                    <h2 data-i18n="users.add">Add User</h2>
                    <form id="add-user-form">
                        <div class="form-group">
                            <label for="add-username" data-i18n="analytics.usersList.username">Username:</label>
                            <input type="text" id="add-username" name="username" required>
                        </div>
                        <div class="form-group">
                            <label for="add-password" data-i18n="users.password">Password:</label>
                            <input type="password" id="add-password" name="password" required>
                        </div>
                        <div class="form-group">
                            <label for="add-role" data-i18n="analytics.usersList.role">Role:</label>
                            <select id="add-role" name="role">
                                <option value="user" data-i18n="users.role.user">User</option>
                                <option value="admin" data-i18n="users.role.admin">Admin</option>
                            </select>
                        </div>
                        <div class="modal-actions">
                            <button type="button" class="btn btn-sm" data-i18n="users.cancel">Cancel</button>
                            <button type="submit" class="btn btn-primary btn-sm" data-i18n="users.save">Save</button>
                        </div>
                    </form>
                </div>
            </div>

            <div id="edit-user-modal" class="modal">
                <div class="modal-content">
                    <button class="modal-close" aria-label="Close modal">×</button>
                    <h2 data-i18n="users.edit">Edit User</h2>
                    <form id="edit-user-form">
                        <input type="hidden" id="edit-user-id" name="id">
                        <div class="form-group">
                            <label for="edit-username" data-i18n="analytics.usersList.username">Username:</label>
                            <input type="text" id="edit-username" name="username" required>
                        </div>
                        <div class="form-group">
                            <label for="edit-password" data-i18n="users.password">Password (leave blank to keep unchanged):</label>
                            <input type="password" id="edit-password" name="password">
                        </div>
                        <div class="form-group">
                            <label for="edit-role" data-i18n="analytics.usersList.role">Role:</label>
                            <select id="edit-role" name="role">
                                <option value="user" data-i18n="users.role.user">User</option>
                                <option value="admin" data-i18n="users.role.admin">Admin</option>
                            </select>
                        </div>
                        <div class="modal-actions">
                            <button type="button" class="btn btn-sm" data-i18n="users.cancel">Cancel</button>
                            <button type="submit" class="btn btn-primary btn-sm" data-i18n="users.save">Save</button>
                        </div>
                    </form>
                </div>
            </div>

            <div id="delete-user-modal" class="modal">
                <div class="modal-content">
                    <button class="modal-close" aria-label="Close modal">×</button>
                    <h2 data-i18n="users.delete">Delete User</h2>
                    <p class="modal-confirm-text" data-i18n="users.deleteConfirm">Are you sure you want to delete this user?</p>
                    <input type="hidden" id="delete-user-id">
                    <div class="modal-actions">
                        <button type="button" class="btn btn-sm" data-i18n="users.cancel">Cancel</button>
                        <button type="button" class="btn btn-delete btn-sm" id="confirm-delete" data-i18n="users.delete">Delete</button>
                    </div>
                </div>
            </div>
        </section>
    </main>

    <footer class="admin-footer">
        <p data-i18n="footer.copyright">© 2023 ISET Sfax. All rights reserved.</p>
    </footer>

    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/i18next@21.9.2/dist/umd/i18next.min.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            i18next.init({
                lng: getCookie('language') || 'en',
                resources: {
                    en: {
                        translation: {
                            'header.title': 'ISET Sfax Chatbot Admin',
                            'header.subtitle': 'Manage the chatbot knowledge base and view analytics',
                            'header.back': 'Back to Chat',
                            'header.logout': 'Logout',
                            'card.analytics.title': 'Conversation Analytics',
                            'card.analytics.subtitle': 'View insights from chatbot interactions',
                            'card.analytics.description': 'Analyze user sentiment and feedback to improve the chatbot\'s performance.',
                            'card.analytics.button': 'View Analytics',
                            'card.settings.title': 'System Settings',
                            'card.settings.subtitle': 'Configure chatbot behavior and appearance',
                            'card.settings.description': 'Adjust confidence thresholds, default language, and other settings that control how the chatbot interacts with users.',
                            'card.settings.button': 'Configure Settings',
                            'tab.analytics': 'Analytics',
                            'tab.settings': 'Settings',
                            'analytics.title': 'Chatbot Analytics',
                            'analytics.stats.title': 'Statistics',
                            'analytics.feedbackList.title': 'User Feedback',
                            'analytics.feedbackList.responseId': 'Response ID',
                            'analytics.feedbackList.rating': 'Rating',
                            'analytics.usersList.title': 'Users',
                            'analytics.usersList.id': 'ID',
                            'analytics.usersList.username': 'Username',
                            'analytics.usersList.role': 'Role',
                            'analytics.usersList.noAccess': 'Access denied. Only administrators can view the user list.',
                            'analytics.totalConversations.title': 'Total Conversations',
                            'analytics.totalConversations.description': 'Number of chat sessions initiated',
                            'analytics.totalMessages.title': 'Total Messages',
                            'analytics.totalMessages.description': 'Total messages exchanged',
                            'analytics.positiveFeedback.title': 'Positive Feedback',
                            'analytics.positiveFeedback.description': 'Percentage of positive responses',
                            'analytics.totalFeedback.title': 'Total Feedback',
                            'analytics.totalFeedback.description': 'Total feedback submissions',
                            'analytics.feedbackAnalysis.title': 'Feedback Analysis',
                            'analytics.userTrend.title': 'User Trend',
                            'analytics.userTrend.description': 'Number of new users per day over the last week',
                            'analytics.messagesList.title': 'Contact Messages',
                            'analytics.messagesList.id': 'ID',
                            'analytics.messagesList.name': 'Name',
                            'analytics.messagesList.email': 'Email',
                            'analytics.messagesList.subject': 'Subject',
                            'analytics.messagesList.message': 'Message',
                            'analytics.messagesList.submittedAt': 'Submitted At',
                            'analytics.messagesList.username': 'Username',
                            'analytics.messagesList.noAccess': 'Access denied. Only administrators can view contact messages.',
                            'settings.title': 'Chatbot Settings',
                            'settings.confidenceThreshold.label': 'Confidence Threshold:',
                            'settings.confidenceThreshold.description': 'Minimum confidence level required for the chatbot to provide an answer',
                            'settings.language.label': 'Default Language:',
                            'settings.language.english': 'English',
                            'settings.language.french': 'French',
                            'settings.language.arabic': 'Arabic',
                            'settings.mlInsights': 'Show ML Insights in Chat Interface',
                            'settings.voiceInput': 'Enable Voice Input',
                            'settings.userFeedback': 'Enable User Feedback',
                            'settings.save': 'Save Settings',
                            'settings.saveSuccess': 'Settings saved successfully!',
                            'footer.copyright': '© 2023 ISET Sfax. All rights reserved.',
                            'language.changeSuccess': 'Language changed successfully!',
                            'language.changeError': 'Error changing language. Please try again.',
                            'error.fallback': 'Something went wrong. Please refresh the page.',
                            'users.add': 'Add User',
                            'users.edit': 'Edit User',
                            'users.delete': 'Delete User',
                            'users.deleteConfirm': 'Are you sure you want to delete this user?',
                            'users.actions': 'Actions',
                            'users.password': 'Password',
                            'users.role.user': 'User',
                            'users.role.admin': 'Admin',
                            'users.cancel': 'Cancel',
                            'users.save': 'Save',
                            'users.addSuccess': 'User added successfully!',
                            'users.editSuccess': 'User updated successfully!',
                            'users.deleteSuccess': 'User deleted successfully!',
                            'users.error': 'Error performing operation. Please try again.'
                        }
                    },
                    fr: {
                        translation: {
                            'header.title': 'Administration du Chatbot ISET Sfax',
                            'header.subtitle': 'Gérer la base de connaissances du chatbot et consulter les analyses',
                            'header.back': 'Retour au Chat',
                            'header.logout': 'Déconnexion',
                            'card.analytics.title': 'Analyse des Conversations',
                            'card.analytics.subtitle': 'Consulter les insights des interactions du chatbot',
                            'card.analytics.description': 'Analysez le sentiment des utilisateurs et les retours pour améliorer les performances du chatbot.',
                            'card.analytics.button': 'Voir les Analyses',
                            'card.settings.title': 'Paramètres du Système',
                            'card.settings.subtitle': 'Configurer le comportement et l’apparence du chatbot',
                            'card.settings.description': 'Ajustez les seuils de confiance, la langue par défaut et autres paramètres qui contrôlent les interactions du chatbot avec les utilisateurs.',
                            'card.settings.button': 'Configurer les Paramètres',
                            'tab.analytics': 'Analyses',
                            'tab.settings': 'Paramètres',
                            'analytics.title': 'Analyses du Chatbot',
                            'analytics.stats.title': 'Statistiques',
                            'analytics.feedbackList.title': 'Retours Utilisateur',
                            'analytics.feedbackList.responseId': 'ID de la Réponse',
                            'analytics.feedbackList.rating': 'Évaluation',
                            'analytics.usersList.title': 'Utilisateur',
                            'analytics.usersList.id': 'ID',
                            'analytics.usersList.username': 'Nom d’utilisateur',
                            'analytics.usersList.role': 'Rôle',
                            'analytics.usersList.noAccess': 'Accès refusé. Seuls les administrateurs peuvent voir la liste des utilisateurs.',
                            'analytics.totalConversations.title': 'Total des Conversations',
                            'analytics.totalConversations.description': 'Nombre de sessions de chat initiées',
                            'analytics.totalMessages.title': 'Total des Messages',
                            'analytics.totalMessages.description': 'Total des messages échangés',
                            'analytics.positiveFeedback.title': 'Retour Positif',
                            'analytics.positiveFeedback.description': 'Pourcentage de réponses positives',
                            'analytics.totalFeedback.title': 'Total des Retours',
                            'analytics.totalFeedback.description': 'Total des soumissions de retours',
                            'analytics.feedbackAnalysis.title': 'Analyse des Retours',
                            'analytics.userTrend.title': 'Tendance des Utilisateur',
                            'analytics.userTrend.description': 'Nombre de nouveaux utilisateurs par jour sur la dernière semaine',
                            'analytics.messagesList.title': 'Messages de Contact',
                            'analytics.messagesList.id': 'ID',
                            'analytics.messagesList.name': 'Nom',
                            'analytics.messagesList.email': 'Email',
                            'analytics.messagesList.subject': 'Sujet',
                            'analytics.messagesList.message': 'Message',
                            'analytics.messagesList.submittedAt': 'Soumis le',
                            'analytics.messagesList.username': 'Nom d’utilisateur',
                            'analytics.messagesList.noAccess': 'Accès refusé. Seuls les administrateurs peuvent voir les messages de contact.',
                            'settings.title': 'Paramètres du Chatbot',
                            'settings.confidenceThreshold.label': 'Seuil de Confiance :',
                            'settings.confidenceThreshold.description': 'Niveau de confiance minimum requis pour que le chatbot fournisse une réponse',
                            'settings.language.label': 'Langue par Défaut :',
                            'settings.language.english': 'Anglais',
                            'settings.language.french': 'Français',
                            'settings.language.arabic': 'Arabe',
                            'settings.mlInsights': 'Afficher les Insights ML dans l’Interface de Chat',
                            'settings.voiceInput': 'Activer l’Entrée Vocale',
                            'settings.userFeedback': 'Activer les Retours Utilisateur',
                            'settings.save': 'Enregistrer les Paramètres',
                            'settings.saveSuccess': 'Paramètres enregistrés avec succès !',
                            'footer.copyright': '© 2023 ISET Sfax. Tous droits réservés.',
                            'language.changeSuccess': 'Langue changée avec succès !',
                            'language.changeError': 'Erreur lors du changement de langue. Veuillez réessayer.',
                            'error.fallback': 'Une erreur s’est produite. Veuillez actualiser la page.',
                            'users.add': 'Ajouter un Utilisateur',
                            'users.edit': 'Modifier l’Utilisateur',
                            'users.delete': 'Supprimer l’Utilisateur',
                            'users.deleteConfirm': 'Êtes-vous sûr de vouloir supprimer cet utilisateur ?',
                            'users.actions': 'Actions',
                            'users.password': 'Mot de passe',
                            'users.role.user': 'Utilisateur',
                            'users.role.admin': 'Administrateur',
                            'users.cancel': 'Annuler',
                            'users.save': 'Enregistrer',
                            'users.addSuccess': 'Utilisateur ajouté avec succès !',
                            'users.editSuccess': 'Utilisateur modifié avec succès !',
                            'users.deleteSuccess': 'Utilisateur supprimé avec succès !',
                            'users.error': 'Erreur lors de l’opération. Veuillez réessayer.'
                        }
                    },
                    ar: {
                        translation: {
                            'header.title': 'إدارة شاتبوت ISET Sfax',
                            'header.subtitle': 'إدارة قاعدة المعرفة للشاتبوت وعرض التحليلات',
                            'header.back': 'العودة إلى الدردشة',
                            'header.logout': 'تسجيل الخروج',
                            'card.analytics.title': 'تحليلات المحادثات',
                            'card.analytics.subtitle': 'عرض رؤى من تفاعلات الشاتبوت',
                            'card.analytics.description': 'تحليل مشاعر المستخدمين والتغذية الراجعة لتحسين أداء الشاتبوت.',
                            'card.analytics.button': 'عرض التحليلات',
                            'card.settings.title': 'إعدادات النظام',
                            'card.settings.subtitle': 'تكوين سلوك ومظهر الشاتبوت',
                            'card.settings.description': 'ضبط عتبات الثقة، واللغة الافتراضية، وغيرها من الإعدادات التي تتحكم في تفاعل الشاتبوت مع المستخدمين.',
                            'card.settings.button': 'تكوين الإعدادات',
                            'tab.analytics': 'التحليلات',
                            'tab.settings': 'الإعدادات',
                            'analytics.title': 'تحليلات الشاتبوت',
                            'analytics.stats.title': 'الإحصائيات',
                            'analytics.feedbackList.title': 'تغذية راجعة المستخدمين',
                            'analytics.feedbackList.responseId': 'معرف الرد',
                            'analytics.feedbackList.rating': 'التقييم',
                            'analytics.usersList.title': 'المستخدمون',
                            'analytics.usersList.id': 'المعرف',
                            'analytics.usersList.username': 'اسم المستخدم',
                            'analytics.usersList.role': 'الدور',
                            'analytics.usersList.noAccess': 'الوصول مرفوض. يمكن فقط للمديرين رؤية قائمة المستخدمين.',
                            'analytics.totalConversations.title': 'إجمالي المحادثات',
                            'analytics.totalConversations.description': 'عدد جلسات الدردشة التي تم بدؤها',
                            'analytics.totalMessages.title': 'إجمالي الرسائل',
                            'analytics.totalMessages.description': 'إجمالي الرسائل المتبادلة',
                            'analytics.positiveFeedback.title': 'التغذية الراجعة الإيجابية',
                            'analytics.positiveFeedback.description': 'نسبة الردود الإيجابية',
                            'analytics.totalFeedback.title': 'إجمالي التغذية الراجعة',
                            'analytics.totalFeedback.description': 'إجمالي التعليقات المقدمة',
                            'analytics.feedbackAnalysis.title': 'تحليل التغذية الراجعة',
                            'analytics.userTrend.title': 'اتجاه المستخدمين',
                            'analytics.userTrend.description': 'عدد المستخدمين الجدد يوميًا خلال الأسبوع الماضي',
                            'analytics.messagesList.title': 'رسائل التواصل',
                            'analytics.messagesList.id': 'المعرف',
                            'analytics.messagesList.name': 'الاسم',
                            'analytics.messagesList.email': 'البريد الإلكتروني',
                            'analytics.messagesList.subject': 'الموضوع',
                            'analytics.messagesList.message': 'الرسالة',
                            'analytics.messagesList.submittedAt': 'تاريخ الإرسال',
                            'analytics.messagesList.username': 'اسم المستخدم',
                            'analytics.messagesList.noAccess': 'الوصول مرفوض. يمكن فقط للمديرين رؤية رسائل التواصل.',
                            'settings.title': 'إعدادات الشاتبوت',
                            'settings.confidenceThreshold.label': 'عتبة الثقة:',
                            'settings.confidenceThreshold.description': 'الحد الأدنى لمستوى الثقة المطلوب لتقديم إجابة من الشاتبوت',
                            'settings.language.label': 'اللغة الافتراضية:',
                            'settings.language.english': 'الإنجليزية',
                            'settings.language.french': 'الفرنسية',
                            'settings.language.arabic': 'العربية',
                            'settings.mlInsights': 'إظهار رؤى التعلم الآلي في واجهة الدردشة',
                            'settings.voiceInput': 'تمكين الإدخال الصوتي',
                            'settings.userFeedback': 'تمكين التغذية الراجعة من المستخدم',
                            'settings.save': 'حفظ الإعدادات',
                            'settings.saveSuccess': 'تم حفظ الإعدادات بنجاح!',
                            'footer.copyright': '© 2023 ISET Sfax. جميع الحقوق محفوظة.',
                            'language.changeSuccess': 'تم تغيير اللغة بنجاح!',
                            'language.changeError': 'خطأ أثناء تغيير اللغة. يرجى المحاولة مرة أخرى.',
                            'error.fallback': 'حدث خطأ. يرجى تحديث الصفحة.',
                            'users.add': 'إضافة مستخدم',
                            'users.edit': 'تعديل المستخدم',
                            'users.delete': 'حذف المستخدم',
                            'users.deleteConfirm': 'هل أنت متأكد من حذف هذا المستخدم؟',
                            'users.actions': 'الإجراءات',
                            'users.password': 'كلمة المرور',
                            'users.role.user': 'مستخدم',
                            'users.role.admin': 'مدير',
                            'users.cancel': 'إلغاء',
                            'users.save': 'حفظ',
                            'users.addSuccess': 'تمت إضافة المستخدم بنجاح!',
                            'users.editSuccess': 'تم تعديل المستخدم بنجاح!',
                            'users.deleteSuccess': 'تم حذف المستخدم بنجاح!',
                            'users.error': 'خطأ أثناء تنفيذ العملية. يرجى المحاولة مرة أخرى.'
                        }
                    }
                }
            }, () => {
                updateLanguage(i18next.language);
            });

            async function loadContactMessages() {
                const tableContainer = document.querySelector('#messages-tab .table-container');
                const messagesTableBody = document.getElementById('messages-table-body');
                tableContainer.classList.add('loading');
                try {
                    const response = await fetch('/load_contact_messages', {
                        method: 'GET',
                        headers: { 'Accept': 'application/json' }
                    });
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    if (!data.success) {
                        throw new Error(data.message);
                    }
                    renderMessagesTable(data.messages);
                } catch (error) {
                    console.error('Error loading contact messages:', error);
                    let errorMessage = error.message;
                    if (errorMessage === 'Access denied. Only administrators can view contact messages.') {
                        errorMessage = i18next.t('analytics.messagesList.noAccess');
                    } else if (errorMessage.includes('HTTP error! status: 500')) {
                        errorMessage = 'Server error: Unable to load messages. Please try again later.';
                    } else {
                        errorMessage = i18next.t('error.fallback');
                    }
                    showToast(errorMessage, true);
                    renderMessagesTable([]);
                } finally {
                    tableContainer.classList.remove('loading');
                }
            }

            function renderMessagesTable(messages) {
                const messagesTableBody = document.getElementById('messages-table-body');
                messagesTableBody.innerHTML = '';
                messages.forEach(message => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${message.id}</td>
                        <td>${message.name}</td>
                        <td>${message.email}</td>
                        <td>${message.subject}</td>
                        <td>${message.message}</td>
                        <td>${new Date(message.submitted_at).toLocaleString(i18next.language === 'ar' ? 'ar-EG' : i18next.language === 'fr' ? 'fr-FR' : 'en-US')}</td>
                        <td>${message.username}</td>
                    `;
                    messagesTableBody.appendChild(row);
                });
            }

            async function loadAllFeedback() {
                const tableContainer = document.querySelector('#feedback-tab .table-container');
                const feedbackTableBody = document.getElementById('feedback-table-body');
                tableContainer.classList.add('loading');
                try {
                    const response = await fetch('/load_all_feedback', {
                        method: 'GET',
                        headers: { 'Accept': 'application/json' }
                    });
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    if (!data.success) {
                        throw new Error(data.message);
                    }
                    renderFeedbackTable(data.feedback);
                    return data.feedback;
                } catch (error) {
                    console.error('Error loading feedback:', error);
                    showToast(i18next.t('error.fallback'), true);
                    renderFeedbackTable([]);
                    return [];
                } finally {
                    tableContainer.classList.remove('loading');
                }
            }

            function renderFeedbackTable(feedback) {
                const feedbackTableBody = document.getElementById('feedback-table-body');
                feedbackTableBody.innerHTML = '';
                feedback.forEach(item => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${item.response_id}</td>
                        <td>${item.rating.charAt(0).toUpperCase() + item.rating.slice(1)}</td>
                    `;
                    feedbackTableBody.appendChild(row);
                });
            }

            async function loadUsers() {
                const tableContainer = document.querySelector('#users-tab .table-container');
                const usersTableBody = document.getElementById('users-table-body');
                tableContainer.classList.add('loading');
                try {
                    const response = await fetch('/load_users', {
                        method: 'GET',
                        headers: { 'Accept': 'application/json' }
                    });
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    if (!data.success) {
                        throw new Error(data.message);
                    }
                    renderUsersTable(data.users);
                    return data.users;
                } catch (error) {
                    console.error('Error loading users:', error);
                    showToast(error.message === 'Accès non autorisé. Seuls les administrateurs peuvent voir la liste des utilisateurs.' 
                        ? i18next.t('analytics.usersList.noAccess') 
                        : i18next.t('error.fallback'), true);
                    renderUsersTable([]);
                    return [];
                } finally {
                    tableContainer.classList.remove('loading');
                }
            }

            function renderUsersTable(users) {
                const usersTableBody = document.getElementById('users-table-body');
                usersTableBody.innerHTML = '';
                users.forEach(user => {
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${user.id}</td>
                        <td>${user.username}</td>
                        <td>${user.role.charAt(0).toUpperCase() + user.role.slice(1)}</td>
                        <td class="action-buttons">
                            <button class="btn btn-edit btn-sm" data-user-id="${user.id}" data-i18n="users.edit">Edit</button>
                            <button class="btn btn-delete btn-sm" data-user-id="${user.id}" data-i18n="users.delete">Delete</button>
                        </td>
                    `;
                    usersTableBody.appendChild(row);
                });
                document.querySelectorAll('.btn-edit').forEach(btn => {
                    btn.addEventListener('click', () => openEditUserModal(btn.getAttribute('data-user-id')));
                });
                document.querySelectorAll('.btn-delete').forEach(btn => {
                    btn.addEventListener('click', () => openDeleteUserModal(btn.getAttribute('data-user-id')));
                });
            }

            async function loadAnalyticsData() {
                const lang = i18next.language;
                try {
                    const feedbackResponse = await fetch('/load_feedback');
                    if (!feedbackResponse.ok) {
                        throw new Error(`HTTP error! status: ${feedbackResponse.status}`);
                    }
                    const feedbackData = await feedbackResponse.json();
                    const users = await loadUsers();
                    const feedback = await loadAllFeedback();
                    
                    // Aggregate user counts by day for the last 7 days
                    const today = new Date();
                    const userCounts = Array(7).fill(0);
                    const userTrendLabels = Array(7).fill('').map((_, i) => {
                        const date = new Date(today);
                        date.setDate(today.getDate() - 6 + i);
                        return date.toLocaleDateString(lang === 'ar' ? 'ar-EG' : lang === 'fr' ? 'fr-FR' : 'en-US', { weekday: 'short' });
                    });
                    
                    users.forEach(user => {
                        if (user.created_at) {
                            const createdDate = new Date(user.created_at);
                            const diffDays = Math.floor((today - createdDate) / (1000 * 60 * 60 * 24));
                            if (diffDays >= 0 && diffDays <
                            7) {
                                userCounts[6 - diffDays]++;
                            }
                        }
                    });

                    // Aggregate feedback ratings
                    const feedbackCounts = { positive: 0, negative: 0 };
                    feedback.forEach(item => {
                        if (item.rating.toLowerCase() === 'positive') {
                            feedbackCounts.positive++;
                        } else if (item.rating.toLowerCase() === 'negative') {
                            feedbackCounts.negative++;
                        }
                    });

                    const analyticsData = {
                        conversations: 125,
                        messages: 843,
                        positiveFeedback: feedbackData.positive_percentage || 0,
                        totalFeedback: feedbackData.total_feedback || 0,
                        feedbackAnalysis: feedbackCounts,
                        userTrend: userCounts
                    };
                    document.getElementById('total-conversations').innerText = formatNumber(analyticsData.conversations, lang);
                    document.getElementById('total-messages').innerText = formatNumber(analyticsData.messages, lang);
                    document.getElementById('positive-feedback').innerText = `${formatNumber(analyticsData.positiveFeedback, lang)}%`;
                    document.getElementById('total-feedback').innerText = formatNumber(analyticsData.totalFeedback, lang);
                    initializeCharts(analyticsData, userTrendLabels);
                } catch (error) {
                    console.error('Error loading analytics data:', error);
                    const analyticsData = {
                        conversations: 125,
                        messages: 843,
                        positiveFeedback: 87,
                        totalFeedback: 100,
                        feedbackAnalysis: { positive: 87, negative: 13 },
                        userTrend: [5, 8, 10, 12, 15, 18, 20]
                    };
                    const userTrendLabels = Array(7).fill('').map((_, i) => {
                        const date = new Date();
                        date.setDate(date.getDate() - 6 + i);
                        return date.toLocaleDateString(lang === 'ar' ? 'ar-EG' : lang === 'fr' ? 'fr-FR' : 'en-US', { weekday: 'short' });
                    });
                    document.getElementById('total-conversations').innerText = formatNumber(analyticsData.conversations, lang);
                    document.getElementById('total-messages').innerText = formatNumber(analyticsData.messages, lang);
                    document.getElementById('positive-feedback').innerText = `${formatNumber(analyticsData.positiveFeedback, lang)}%`;
                    document.getElementById('total-feedback').innerText = formatNumber(analyticsData.totalFeedback, lang);
                    initializeCharts(analyticsData, userTrendLabels);
                    await loadAllFeedback();
                }
            }

            function initializeCharts(analyticsData, userTrendLabels) {
                const lang = i18next.language;
                const isRTL = lang === 'ar';

                if (window.feedbackChart) {
                    window.feedbackChart.destroy();
                }
                if (window.userTrendChart) {
                    window.userTrendChart.destroy();
                }

                window.feedbackChart = new Chart(document.getElementById('feedback-chart'), {
                    type: 'bar',
                    data: {
                        labels: chartLabels[lang].feedback,
                        datasets: [{
                            label: i18next.t('analytics.feedbackAnalysis.title'),
                            data: [
                                analyticsData.feedbackAnalysis.positive,
                                analyticsData.feedbackAnalysis.negative
                            ],
                            backgroundColor: [
                                'rgba(40, 167, 69, 0.8)',
                                'rgba(220, 53, 69, 0.8)'
                            ]
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                reverse: isRTL,
                                grid: { display: false }
                            },
                            y: {
                                beginAtZero: true,
                                grid: { color: 'rgba(0, 0, 0, 0.1)' }
                            }
                        },
                        plugins: {
                            legend: { display: false }
                        }
                    }
                });

                window.userTrendChart = new Chart(document.getElementById('user-trend-chart'), {
                    type: 'line',
                    data: {
                        labels: userTrendLabels,
                        datasets: [{
                            label: i18next.t('analytics.userTrend.title'),
                            data: analyticsData.userTrend,
                            borderColor: 'rgba(0, 51, 160, 0.8)',
                            backgroundColor: 'rgba(0, 51, 160, 0.2)',
                            fill: true,
                            tension: 0.4
                        }]
                    },
                    options: {
                        responsive: true,
                        scales: {
                            x: {
                                reverse: isRTL,
                                grid: { display: false }
                            },
                            y: {
                                beginAtZero: true,
                                grid: { color: 'rgba(0, 0, 0, 0.1)' }
                            }
                        },
                        plugins: {
                            legend: { display: true, position: 'top' }
                        }
                    }
                });
            }

            function updateCharts() {
                loadAnalyticsData();
            }

            const analyticsTabs = document.querySelectorAll('.analytics-tab');
            function switchAnalyticsTab(tabId) {
                analyticsTabs.forEach(tab => tab.classList.remove('active'));
                document.querySelectorAll('.analytics-tab-content').forEach(content => content.classList.remove('active'));
                document.querySelector(`.analytics-tab[data-tab="${tabId}"]`).classList.add('active');
                document.getElementById(`${tabId}-tab`).classList.add('active');
                if (tabId === 'feedback') {
                    loadAllFeedback();
                } else if (tabId === 'users') {
                    loadUsers();
                } else if (tabId === 'stats') {
                    updateCharts();
                } else if (tabId === 'messages') {
                    loadContactMessages();
                }
            }

            analyticsTabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    const tabId = tab.getAttribute('data-tab');
                    switchAnalyticsTab(tabId);
                });
            });

            const chartLabels = {
                en: {
                    feedback: ['Positive', 'Negative'],
                    userTrend: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']
                },
                fr: {
                    feedback: ['Positif', 'Négatif'],
                    userTrend: ['Lun', 'Mar', 'Mer', 'Jeu', 'Ven', 'Sam', 'Dim']
                },
                ar: {
                    feedback: ['إيجابي', 'سلبي'],
                    userTrend: ['الإثنين', 'الثلاثاء', 'الأربعاء', 'الخميس', 'الجمعة', 'السبت', 'الأحد']
                }
            };

            function showToast(message, isError = false) {
                const toast = document.createElement('div');
                toast.className = `toast ${isError ? 'error' : ''}`;
                toast.textContent = message;
                document.body.appendChild(toast);
                setTimeout(() => toast.classList.add('show'), 100);
                setTimeout(() => {
                    toast.classList.remove('show');
                    setTimeout(() => toast.remove(), 300);
                }, 3000);
            }

            function formatNumber(value, lang) {
                return new Intl.NumberFormat(lang === 'ar' ? 'ar-EG' : lang === 'fr' ? 'fr-FR' : 'en-US').format(value);
            }

            function setCookie(name, value, days) {
                const date = new Date();
                date.setTime(date.getTime() + (days * 24 * 60 * 60 * 1000));
                document.cookie = `${name}=${value};expires=${date.toUTCString()};path=/`;
            }

            function getCookie(name) {
                const value = `; ${document.cookie}`;
                const parts = value.split(`; ${name}=`);
                return parts.length === 2 ? parts.pop().split(';').shift() : null;
            }

            async function trackAnalyticsEvent(eventName, data) {
                try {
                    await fetch('/track_event', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ event: eventName, ...data })
                    });
                } catch (error) {
                    console.error('Error tracking event:', error);
                }
            }

            async function updateLanguage(lang) {
                try {
                    document.body.classList.add('fade');
                    await new Promise(resolve => setTimeout(resolve, 300));
                    i18next.changeLanguage(lang, () => {
                        document.documentElement.setAttribute('lang', lang);
                        document.querySelectorAll('[data-i18n]').forEach(element => {
                            element.textContent = i18next.t(element.getAttribute('data-i18n'));
                        });
                        const stats = document.querySelectorAll('.analytics-card .stat');
                        stats.forEach(stat => {
                            const value = parseFloat(stat.textContent.replace('%', ''));
                            if (!isNaN(value)) {
                                stat.textContent = formatNumber(value, lang) + (stat.id.includes('feedback') ? '%' : '');
                            }
                        });
                        const isRTL = lang === 'ar';
                        if (window.feedbackChart) {
                            window.feedbackChart.data.labels = chartLabels[lang].feedback;
                            window.feedbackChart.options.scales.x.reverse = isRTL;
                            window.feedbackChart.update();
                        }
                        if (window.userTrendChart) {
                            window.userTrendChart.data.labels = chartLabels[lang].userTrend;
                            window.userTrendChart.options.scales.x.reverse = isRTL;
                            window.userTrendChart.update();
                        }
                        document.querySelectorAll('.language-btn').forEach(btn => {
                            btn.classList.toggle('active', btn.getAttribute('data-lang') === lang);
                        });
                        document.getElementById('default-language').value = lang;
                        setCookie('language', lang, 30);
                        fetch('/save_language', {
                            method: 'POST',
                            headers: { 'Content-Type': 'application/json' },
                            body: JSON.stringify({ language: lang })
                        }).catch(error => console.error('Error saving language:', error));
                        trackAnalyticsEvent('language_change', { language: lang });
                        document.body.classList.remove('fade');
                        showToast(i18next.t('language.changeSuccess'));
                    });
                } catch (error) {
                    console.error('Error updating language:', error);
                    showToast(i18next.t('language.changeError'), true);
                    renderErrorBoundary();
                }
            }

            function renderErrorBoundary() {
                const mainContent = document.getElementById('main-content');
                mainContent.innerHTML = `
                    <div class="error-boundary">
                        <h2>${i18next.t('error.fallback')}</h2>
                        <button class="btn btn-primary" onclick="location.reload()">Refresh</button>
                    </div>
                `;
            }

            const savedLanguage = getCookie('language') || 'en';
            updateLanguage(savedLanguage);

            const languageButtons = document.querySelectorAll('.language-btn');
            languageButtons.forEach(button => {
                button.addEventListener('click', () => {
                    const lang = button.getAttribute('data-lang');
                    if (lang !== i18next.language) {
                        updateLanguage(lang);
                    }
                });
            });

            const themeToggle = document.getElementById('theme-toggle');
            const themeIcon = document.getElementById('theme-icon');
            function toggleTheme() {
                const isDark = document.body.classList.toggle('dark');
                themeIcon.className = isDark ? 'fas fa-sun' : 'fas fa-moon';
                localStorage.setItem('theme', isDark ? 'dark' : 'light');
            }

            const savedTheme = localStorage.getItem('theme');
            if (savedTheme === 'dark') {
                document.body.classList.add('dark');
                themeIcon.className = 'fas fa-sun';
            }

            themeToggle.addEventListener('click', toggleTheme);

            const openAnalyticsBtn = document.getElementById('open-analytics');
            const openSettingsBtn = document.getElementById('open-settings');
            const closeDashboardBtn = document.getElementById('close-dashboard');
            const dashboardContent = document.getElementById('dashboard-content');

            function showDashboard() {
                dashboardContent.classList.add('active');
                loadAnalyticsData();
            }

            function hideDashboard() {
                dashboardContent.classList.remove('active');
            }

            openAnalyticsBtn.addEventListener('click', () => {
                showDashboard();
                switchTab('analytics');
                switchAnalyticsTab('stats');
            });

            openSettingsBtn.addEventListener('click', () => {
                showDashboard();
                switchTab('settings');
            });

            closeDashboardBtn.addEventListener('click', hideDashboard);

            const tabs = document.querySelectorAll('.dashboard-tab');
            function switchTab(tabId) {
                tabs.forEach(tab => tab.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(content => content.classList.remove('active'));
                document.querySelector(`.dashboard-tab[data-tab="${tabId}"]`).classList.add('active');
                document.getElementById(`${tabId}-tab`).classList.add('active');
                if (tabId === 'analytics') {
                    updateCharts();
                }
            }

            tabs.forEach(tab => {
                tab.addEventListener('click', () => {
                    const tabId = tab.getAttribute('data-tab');
                    switchTab(tabId);
                });
            });

            const addUserBtn = document.getElementById('add-user-btn');
            const addUserModal = document.getElementById('add-user-modal');
            const editUserModal = document.getElementById('edit-user-modal');
            const deleteUserModal = document.getElementById('delete-user-modal');
            const addUserForm = document.getElementById('add-user-form');
            const editUserForm = document.getElementById('edit-user-form');
            const confirmDeleteBtn = document.getElementById('confirm-delete');

            function openModal(modal) {
                modal.classList.add('active');
            }

            function closeModal(modal) {
                modal.classList.remove('active');
            }

            function closeAllModals() {
                [addUserModal, editUserModal, deleteUserModal].forEach(modal => closeModal(modal));
            }

            document.querySelectorAll('.modal-close').forEach(btn => {
                btn.addEventListener('click', () => {
                    closeAllModals();
                });
            });

            document.querySelectorAll('.modal .btn:not([type="submit"])').forEach(btn => {
                if (!btn.id.includes('confirm-delete')) {
                    btn.addEventListener('click', () => {
                        closeAllModals();
                    });
                }
            });

            addUserBtn.addEventListener('click', () => {
                addUserForm.reset();
                openModal(addUserModal);
            });

            async function openEditUserModal(userId) {
                try {
                    const response = await fetch('/load_users', {
                        method: 'GET',
                        headers: { 'Accept': 'application/json' }
                    });
                    if (!response.ok) {
                        throw new Error(`HTTP error! status: ${response.status}`);
                    }
                    const data = await response.json();
                    if (!data.success) {
                        throw new Error(data.message);
                    }
                    const user = data.users.find(u => u.id === parseInt(userId));
                    if (user) {
                        document.getElementById('edit-user-id').value = user.id;
                        document.getElementById('edit-username').value = user.username;
                        document.getElementById('edit-role').value = user.role;
                        document.getElementById('edit-password').value = '';
                        openModal(editUserModal);
                    }
                } catch (error) {
                    console.error('Error loading user:', error);
                    showToast(i18next.t('users.error'), true);
                }
            }

            function openDeleteUserModal(userId) {
                document.getElementById('delete-user-id').value = userId;
                openModal(deleteUserModal);
            }

            addUserForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(addUserForm);
                const data = {
                    username: formData.get('username'),
                    password: formData.get('password'),
                    role: formData.get('role')
                };
                try {
                    const response = await fetch('/add_user', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });
                    const result = await response.json();
                    if (result.success) {
                        showToast(i18next.t('users.addSuccess'));
                        closeAllModals();
                        loadUsers();
                    } else {
                        showToast(result.message || i18next.t('users.error'), true);
                    }
                } catch (error) {
                    console.error('Error adding user:', error);
                    showToast(i18next.t('users.error'), true);
                }
            });

            editUserForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const formData = new FormData(editUserForm);
                const data = {
                    id: formData.get('id'),
                    username: formData.get('username'),
                    role: formData.get('role')
                };
                if (formData.get('password')) {
                    data.password = formData.get('password');
                }
                try {
                    const response = await fetch('/update_user', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data)
                    });
                    const result = await response.json();
                    if (result.success) {
                        showToast(i18next.t('users.editSuccess'));
                        closeAllModals();
                        loadUsers();
                    } else {
                        showToast(result.message || i18next.t('users.error'), true);
                    }
                } catch (error) {
                    console.error('Error updating user:', error);
                    showToast(i18next.t('users.error'), true);
                }
            });

            confirmDeleteBtn.addEventListener('click', async () => {
                const userId = document.getElementById('delete-user-id').value;
                try {
                    const response = await fetch('/delete_user', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ id: userId })
                    });
                    const result = await response.json();
                    if (result.success) {
                        showToast(i18next.t('users.deleteSuccess'));
                        closeAllModals();
                        loadUsers();
                    } else {
                        showToast(result.message || i18next.t('users.error'), true);
                    }
                } catch (error) {
                    console.error('Error deleting user:', error);
                    showToast(i18next.t('users.error'), true);
                }
            });
        });
    </script>
</body>
</html>
